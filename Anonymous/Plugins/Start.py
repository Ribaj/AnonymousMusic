import asyncio
import time
from sys import version as pyver
from typing import Dict, List, Union

import psutil
from pyrogram import filters
from pyrogram.types import (CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, InputMediaPhoto, Message)

from Anonymous import ASSID, BOT_ID, MUSIC_BOT_NAME, OWNER_ID, SUDOERS, app
from Anonymous import boottime as bot_start_time
from Anonymous import db
from Anonymous.Core.PyTgCalls import Anonymous
from Anonymous.Database import (add_nonadmin_chat, add_served_chat,
                            blacklisted_chats, get_assistant, get_authuser,
                            get_authuser_names, is_nonadmin_chat,
                            is_served_chat, remove_active_chat,
                            remove_nonadmin_chat, save_assistant)
from Anonymous.Decorators.admins import ActualAdminCB
from Anonymous.Decorators.permission import PermissionCheck
from Anonymous.Inline import (custommarkup, dashmarkup, setting_markup,
                          start_pannel, usermarkup, volmarkup)
from Anonymous.Utilities.ping import get_readable_time

welcome_group = 2

__MODULE__ = "Essentials"
__HELP__ = """


/start 
¬ª s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ.

/help 
¬ª …¢·¥á·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös  ú·¥á ü·¥ò·¥á Ä ·¥ç·¥á…¥·¥ú‚Äã.

"""


@app.on_message(filters.new_chat_members, group=welcome_group)
async def welcome(_, message: Message):
    chat_id = message.chat.id
    if await is_served_chat(chat_id):
        pass
    else:
        await add_served_chat(chat_id)
    if chat_id in await blacklisted_chats():
        await message.reply_text(
            f"Íú∞·¥ú*·¥ã,  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò[{message.chat.title}]  ú·¥Äs  ô·¥á·¥á…¥  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö !\n\n·¥Äs·¥ã ·¥Ä…¥ è s·¥ú·¥Ö·¥è ·¥ús·¥á Ä ·¥õ·¥è ·¥° ú…™·¥õ·¥á ü…™s·¥õ  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ"
        )
        await app.leave_chat(chat_id)
    for member in message.new_chat_members:
        try:
            if member.id in OWNER_ID:
                return await message.reply_text(
                    f"{MUSIC_BOT_NAME}'s ·¥è·¥°…¥·¥á Ä[{member.mention}]  ú·¥Äs ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ."
                )
            if member.id in SUDOERS:
                return await message.reply_text(
                    f"·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥èÍú∞ {MUSIC_BOT_NAME}'s s·¥ú·¥Ö·¥è ·¥ús·¥á Ä[{member.mention}]  ú·¥Äs ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ."
                )
            if member.id == ASSID:
                await remove_active_chat(chat_id)
            if member.id == BOT_ID:
                out = start_pannel()
                await message.reply_text(
                    f"·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è {MUSIC_BOT_NAME}\n\n·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç·¥á ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥…™s·¥õ Ä·¥Ä·¥õ·¥è Ä …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥è·¥õ ú·¥á Ä·¥°…™s·¥á …™ ·¥°…™ ü ü …¥·¥è·¥õ Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥ò·¥á Ä ü è.",
                    reply_markup=InlineKeyboardMarkup(out[1]),
                )
                return
        except:
            return


@app.on_message(filters.command(["help", "start"]) & filters.group)
@PermissionCheck
async def useradd(_, message: Message):
    out = start_pannel()
    await asyncio.gather(
        message.delete(),
        message.reply_text(
            f"·¥õ ú·¥Ä…¥·¥ãs Íú∞·¥è Ä  ú·¥Ä·¥†…™…¥…¢ ·¥ç·¥á …™…¥ {message.chat.title}.\n{MUSIC_BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á.\n\nÍú∞·¥è Ä ·¥Ä…¥ è ·¥Äss…™s·¥õ·¥Ä…¥·¥Ñ·¥á ·¥è Ä  ú·¥á ü·¥ò, ·¥Ñ ú·¥á·¥Ñ·¥ã·¥è·¥ú·¥õ ·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü.",
            reply_markup=InlineKeyboardMarkup(out[1]),
        ),
    )


@app.on_callback_query(filters.regex("okaybhai"))
async def okaybhai(_, CallbackQuery):
    await CallbackQuery.answer("Going Back ...")
    out = start_pannel()
    await CallbackQuery.edit_message_text(
        text=f"·¥õ ú·¥Ä…¥·¥ãs Íú∞·¥è Ä  ú·¥Ä·¥†…™…¥…¢ ·¥ç·¥á …™…¥ {CallbackQuery.message.chat.title}.\n{MUSIC_BOT_NAME}…™s ·¥Ä ü…™·¥†·¥á.\n\nÍú∞·¥è Ä ·¥Ä…¥ è ·¥Äss…™s·¥õ·¥Ä…¥·¥Ñ·¥á ·¥è Ä  ú·¥á ü·¥ò, ·¥Ñ ú·¥á·¥Ñ·¥ã·¥è·¥ú·¥õ ·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü.",
        reply_markup=InlineKeyboardMarkup(out[1]),
    )


@app.on_callback_query(filters.regex("settingm"))
async def settingm(_, CallbackQuery):
    await CallbackQuery.answer("Bot Settings ...")
    text, buttons = setting_markup()
    c_title = CallbackQuery.message.chat.title
    c_id = CallbackQuery.message.chat.id
    chat_id = CallbackQuery.message.chat.id
    _check = await get_assistant(c_id, "assistant")
    if not _check:
        assis = {
            "volume": 100,
        }
        await save_assistant(c_id, "assistant", assis)
        volume = 100
    else:
        volume = _check["volume"]
    await CallbackQuery.edit_message_text(
        text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü‚Äã:** {volume}%",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex("EVE"))
@ActualAdminCB
async def EVE(_, CallbackQuery):
    checking = CallbackQuery.from_user.username
    text, buttons = usermarkup()
    chat_id = CallbackQuery.message.chat.id
    is_non_admin = await is_nonadmin_chat(chat_id)
    if not is_non_admin:
        await CallbackQuery.answer("·¥Ñ ú·¥Ä…¥…¢·¥ás s·¥Ä·¥†·¥á·¥Ö")
        await add_nonadmin_chat(chat_id)
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥ç·¥è·¥Ö·¥á ·¥õ·¥è **·¥á·¥†·¥á Ä è·¥è…¥·¥á**\n\n…¥·¥è·¥° ·¥Ä…¥ è·¥è…¥·¥á ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ s·¥ã…™·¥ò, ·¥ò·¥Ä·¥ús·¥á,  Ä·¥ás·¥ú·¥ç·¥á, s·¥õ·¥è·¥ò ·¥ç·¥ús…™·¥Ñ.\n\n·¥Ñ ú·¥Ä…¥…¢·¥ás ·¥Ö·¥è…¥·¥á  ô è‚Äã @{checking}",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    else:
        await CallbackQuery.answer(
            "·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥ç·¥è·¥Ö·¥á …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è s·¥Ä·¥†·¥á·¥Ö ·¥õ·¥è ·¥á·¥†·¥á Ä è·¥è…¥·¥á", show_alert=True
        )


@app.on_callback_query(filters.regex("AMS"))
@ActualAdminCB
async def AMS(_, CallbackQuery):
    checking = CallbackQuery.from_user.username
    text, buttons = usermarkup()
    chat_id = CallbackQuery.message.chat.id
    is_non_admin = await is_nonadmin_chat(chat_id)
    if not is_non_admin:
        await CallbackQuery.answer(
            "·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥ç·¥è·¥Ö·¥á …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è s·¥Ä·¥†·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è", show_alert=True
        )
    else:
        await CallbackQuery.answer("Changes Saved")
        await remove_nonadmin_chat(chat_id)
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\ns·¥á·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥ç·¥è·¥Ö·¥á ·¥õ·¥è **·¥Ä·¥Ö·¥ç…™…¥s**\n\n…¥·¥è·¥° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ s·¥ã…™·¥ò, ·¥ò·¥Ä·¥ús·¥á,  Ä·¥ás·¥ú·¥ç·¥á, s·¥õ·¥è·¥ò ·¥ç·¥ús…™·¥Ñ.\n\n·¥Ñ ú·¥Ä…¥…¢·¥ás ·¥Ö·¥è…¥·¥á  ô è‚Äã @{checking}",
            reply_markup=InlineKeyboardMarkup(buttons),
        )


@app.on_callback_query(
    filters.regex(
        pattern=r"^(AQ|AV|AU|Dashboard|HV|LV|MV|HV|VAM|Custommarkup|PTEN|MTEN|PTF|MTF|PFZ|MFZ|USERLIST|UPT|CPT|RAT|DIT)$"
    )
)
async def start_markup_check(_, CallbackQuery):
    command = CallbackQuery.matches[0].group(1)
    c_title = CallbackQuery.message.chat.title
    c_id = CallbackQuery.message.chat.id
    chat_id = CallbackQuery.message.chat.id
    if command == "AQ":
        await CallbackQuery.answer("·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥  ô·¥ás·¥õ «´·¥ú·¥Ä ü…™·¥õ è", show_alert=True)
    if command == "AV":
        await CallbackQuery.answer(" ô·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢s")
        text, buttons = volmarkup()
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "AU":
        await CallbackQuery.answer(" ô·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢s")
        text, buttons = usermarkup()
        is_non_admin = await is_nonadmin_chat(chat_id)
        if not is_non_admin:
            current = "·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è‚Äã"
        else:
            current = "·¥á·¥†·¥á Ä è·¥è…¥·¥á"
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥° ú·¥è ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á {MUSIC_BOT_NAME}:- **{current}**\n\n**‚ÅâÔ∏è ·¥° ú·¥Ä·¥õ …™s ·¥õ ú…™s?**\n\n**üë• ·¥á·¥†·¥á Ä è·¥è…¥·¥á :-**·¥Ä…¥ è·¥è…¥·¥á ·¥Ñ·¥Ä…¥ ·¥ús·¥á {MUSIC_BOT_NAME}'s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös(s·¥ã…™·¥ò,·¥ò·¥Ä·¥ús·¥á, Ä·¥ás·¥ú·¥ç·¥á,·¥á.·¥õ.·¥Ñ.) ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.\n\n**üôç ·¥Ä·¥Ö·¥ç…™…¥ ·¥è…¥ ü è :-**  ·¥è…¥ ü è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä·¥ú·¥õ ú·¥è Ä…™s·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥èÍú∞‚Äã {MUSIC_BOT_NAME}.",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "Dashboard":
        await CallbackQuery.answer("·¥Ö·¥Äs ú ô·¥è·¥Ä Ä·¥Ö‚Äã")
        text, buttons = dashmarkup()
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n\n·¥Ñ ú·¥á·¥Ñ·¥ã {MUSIC_BOT_NAME}'s s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õs …™…¥ ·¥õ ú·¥á ·¥Ö·¥Äs ú ô·¥è·¥Ä Ä·¥Ö  ú·¥á Ä·¥á! ·¥ã·¥á·¥á·¥ò ·¥è…¥ ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü‚Äã.",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "Custommarkup":
        await CallbackQuery.answer(" ô·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢s")
        text, buttons = custommarkup()
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "LV":
        assis = {
            "volume": 25,
        }
        volume = 25
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = volmarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "MV":
        assis = {
            "volume": 50,
        }
        volume = 50
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = volmarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "HV":
        assis = {
            "volume": 100,
        }
        volume = 100
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = volmarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "VAM":
        assis = {
            "volume": 200,
        }
        volume = 200
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = volmarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "PTEN":
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        volume = volume + 10
        if int(volume) > 200:
            volume = 200
        if int(volume) < 10:
            volume = 10
        assis = {
            "volume": volume,
        }
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = custommarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "MTEN":
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        volume = volume - 10
        if int(volume) > 200:
            volume = 200
        if int(volume) < 10:
            volume = 10
        assis = {
            "volume": volume,
        }
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = custommarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "PTF":
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        volume = volume + 25
        if int(volume) > 200:
            volume = 200
        if int(volume) < 10:
            volume = 10
        assis = {
            "volume": volume,
        }
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = custommarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "MTF":
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        volume = volume - 25
        if int(volume) > 200:
            volume = 200
        if int(volume) < 10:
            volume = 10
        assis = {
            "volume": volume,
        }
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = custommarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "PFZ":
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        volume = volume + 50
        if int(volume) > 200:
            volume = 200
        if int(volume) < 10:
            volume = 10
        assis = {
            "volume": volume,
        }
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = custommarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "MFZ":
        _check = await get_assistant(c_id, "assistant")
        volume = _check["volume"]
        volume = volume - 50
        if int(volume) > 200:
            volume = 200
        if int(volume) < 10:
            volume = 10
        assis = {
            "volume": volume,
        }
        try:
            await Anonymous.pytgcalls.change_volume_call(c_id, volume)
            await CallbackQuery.answer("s·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¢·¥ás!")
        except:
            return await CallbackQuery.answer("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü‚Äã!")
        await save_assistant(c_id, "assistant", assis)
        text, buttons = custommarkup()
        await CallbackQuery.edit_message_text(
            text=f"{text}\n\n**…¢ Ä·¥è·¥ú·¥ò:** {c_title}\n**…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** {c_id}\n**·¥†·¥è ü·¥ú·¥ç·¥á  ü·¥á·¥†·¥á ü:** {volume}%\n**·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è:** Default Best",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if command == "USERLIST":
        await CallbackQuery.answer("·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs!")
        text, buttons = usermarkup()
        _playlist = await get_authuser_names(CallbackQuery.message.chat.id)
        if not _playlist:
            return await CallbackQuery.edit_message_text(
                text=f"{text}\n\n…¥·¥è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs Íú∞·¥è·¥ú…¥·¥Ö\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä ü ü·¥è·¥° ·¥Ä…¥ è …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ús·¥á ·¥ç è ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös  ô è /auth ·¥Ä…¥·¥Ö ·¥Ö·¥á ü·¥á·¥õ·¥á  ô è ·¥ús…™…¥…¢‚Äã /unauth",
                reply_markup=InlineKeyboardMarkup(buttons),
            )
        else:
            j = 0
            await CallbackQuery.edit_message_text(
                "Íú∞·¥á·¥õ·¥Ñ ú…™…¥…¢ ·¥Ä·¥ú·¥õ ú·¥è Ä…™s·¥á·¥Ö ·¥ús·¥á Äs! ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...‚Äã"
            )
            msg = f"**·¥Ä·¥ú·¥õ ú·¥è Ä…™s·¥á·¥Ö ·¥ús·¥á Äs  ü…™s·¥õ‚Äã[AUL]:**\n\n"
            for note in _playlist:
                _note = await get_authuser(
                    CallbackQuery.message.chat.id, note
                )
                user_id = _note["auth_user_id"]
                user_name = _note["auth_name"]
                admin_id = _note["admin_id"]
                admin_name = _note["admin_name"]
                try:
                    user = await app.get_users(user_id)
                    user = user.first_name
                    j += 1
                except Exception:
                    continue
                msg += f"{j}‚û§ {user}[`{user_id}`]\n"
                msg += f"    ¬ª ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  ô è:- {admin_name}[`{admin_id}`]\n\n"
            await CallbackQuery.edit_message_text(
                msg, reply_markup=InlineKeyboardMarkup(buttons)
            )
    if command == "UPT":
        bot_uptimee = int(time.time() - bot_start_time)
        Uptimeee = f"{get_readable_time((bot_uptimee))}"
        await CallbackQuery.answer(
            f" ô·¥è·¥õ's ·¥ú·¥ò·¥õ…™·¥ç·¥á: {Uptimeee}", show_alert=True
        )
    if command == "CPT":
        cpue = psutil.cpu_percent(interval=0.5)
        await CallbackQuery.answer(
            f" ô·¥è·¥õ's ·¥Ñ·¥ò·¥ú ·¥ús·¥Ä…¢·¥á: {cpue}%", show_alert=True
        )
    if command == "RAT":
        meme = psutil.virtual_memory().percent
        await CallbackQuery.answer(
            f" ô·¥è·¥õ's ·¥ç·¥á·¥ç·¥è Ä è ·¥ús·¥Ä…¢·¥á: {meme}%", show_alert=True
        )
    if command == "DIT":
        diske = psutil.disk_usage("/").percent
        await CallbackQuery.answer(
            f"·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ö…™s·¥ã ·¥ús·¥Ä…¢·¥á‚Äã: {diske}%", show_alert=True
        )
