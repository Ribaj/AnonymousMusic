import asyncio
import os
import shutil
import subprocess
from sys import version as pyver

from config import OWNER_ID
from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.types import Message

from Anonymous import BOT_ID, MUSIC_BOT_NAME, OWNER_ID, SUDOERS, app
from Anonymous.Database import (add_gban_user, add_off, add_on, add_sudo,
                            get_active_chats, get_served_chats, get_sudoers,
                            is_gbanned_user, remove_active_chat,
                            remove_gban_user, remove_served_chat, remove_sudo)

__MODULE__ = "SudoUsers"
__HELP__ = """


**Note:**
·¥è…¥ ü è Íú∞·¥è Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Äs


/sudolist 
¬ª ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á s·¥ú·¥Ö·¥è ·¥ús·¥á Ä  ü…™s·¥õ ·¥èÍú∞  ô·¥è·¥õ

/addsudo [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä]
¬ª ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥ús·¥á Ä …™…¥  ô·¥è·¥õ's s·¥ú·¥Ö·¥è ·¥ús·¥á Äs

/delsudo [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä]
¬ª ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥ús·¥á Ä Íú∞ Ä·¥è·¥ç  ô·¥è·¥õ's s·¥ú·¥Ö·¥è ·¥ús·¥á Äs

/restart 
¬ª  Ä·¥ás·¥õ·¥Ä Ä·¥õ  ô·¥è·¥õ [·¥Ä ü ü ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös, ·¥Ñ·¥Ä·¥Ñ ú·¥á,  Ä·¥Ä·¥° Íú∞…™ ü·¥ás ·¥°…™ ü ü  ô·¥á ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö ·¥õ·¥è·¥è]

/maintenance [·¥á…¥·¥Ä ô ü·¥á / ·¥Ö…™s·¥Ä ô ü·¥á]
¬ª ·¥° ú·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö  ô·¥è·¥õ …¢·¥è·¥ás ·¥ú…¥·¥Ö·¥á Ä ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á. …¥·¥è ·¥è…¥·¥á ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …¥·¥è·¥°!‚Äã

/update 
¬ª Íú∞·¥á·¥õ·¥Ñ ú ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás Íú∞ Ä·¥è·¥ç s·¥á Ä·¥†·¥á Ä

/clean
¬ª ·¥Ñ ü·¥á·¥Ä…¥ ·¥õ·¥á·¥ç·¥ò Íú∞…™ ü·¥ás ·¥Ä…¥·¥Ö  ü·¥è…¢s
"""
# Add Sudo Users!


@app.on_message(filters.command("addsudo") & filters.user(OWNER_ID))
async def useradd(_, message: Message):
    if not message.reply_to_message:
        if len(message.command) != 2:
            await message.reply_text(
                " Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä's ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä …¢…™·¥†·¥á ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/·¥ús·¥á Ä_…™·¥Ö"
            )
            return
        user = message.text.split(None, 1)[1]
        if "@" in user:
            user = user.replace("@", "")
        user = await app.get_users(user)
        if user.id in SUDOERS:
            return await message.reply_text(
                f"{user.mention} …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Ä."
            )
        added = await add_sudo(user.id)
        if added:
            await message.reply_text(
                f"·¥Ä·¥Ö·¥Ö·¥á·¥Ö **{user.mention}** ·¥õ·¥è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs."
            )
            os.system(f"kill -9 {os.getpid()} && python3 -m Anonymous")
        else:
            await message.reply_text("Failed")
        return
    if message.reply_to_message.from_user.id in SUDOERS:
        return await message.reply_text(
            f"{message.reply_to_message.from_user.mention} is already a sudo user."
        )
    added = await add_sudo(message.reply_to_message.from_user.id)
    if added:
        await message.reply_text(
            f"·¥Ä·¥Ö·¥Ö·¥á·¥Ö **{message.reply_to_message.from_user.mention}** ·¥õ·¥è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs"
        )
        os.system(f"kill -9 {os.getpid()} && python3 -m Anonymous")
    else:
        await message.reply_text("Failed")
    return


@app.on_message(filters.command("delsudo") & filters.user(OWNER_ID))
async def userdel(_, message: Message):
    if not message.reply_to_message:
        if len(message.command) != 2:
            await message.reply_text(
                " Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä's ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä …¢…™·¥†·¥á ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/·¥ús·¥á Ä_…™·¥Ö."
            )
            return
        user = message.text.split(None, 1)[1]
        if "@" in user:
            user = user.replace("@", "")
        user = await app.get_users(user)
        from_user = message.from_user
        if user.id not in SUDOERS:
            return await message.reply_text(f"…¥·¥è·¥õ ·¥Ä ·¥ò·¥Ä Ä·¥õ ·¥èÍú∞  ô·¥è·¥õ's s·¥ú·¥Ö·¥è.")
        removed = await remove_sudo(user.id)
        if removed:
            await message.reply_text(
                f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö **{user.mention}** Íú∞ Ä·¥è·¥ç {MUSIC_BOT_NAME}'s s·¥ú·¥Ö·¥è."
            )
            return os.system(f"kill -9 {os.getpid()} && python3 -m Anonymous")
        await message.reply_text(f"s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥° Ä·¥è…¥…¢  ú·¥Ä·¥ò·¥ò·¥á…¥·¥á·¥Ö")
        return
    from_user_id = message.from_user.id
    user_id = message.reply_to_message.from_user.id
    mention = message.reply_to_message.from_user.mention
    if user_id not in SUDOERS:
        return await message.reply_text(
            f"…¥·¥è·¥õ ·¥Ä ·¥ò·¥Ä Ä·¥õ ·¥èÍú∞ {MUSIC_BOT_NAME}'s s·¥ú·¥Ö·¥è."
        )
    removed = await remove_sudo(user_id)
    if removed:
        await message.reply_text(
            f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö **{mention}** Íú∞ Ä·¥è·¥ç {MUSIC_BOT_NAME}'s s·¥ú·¥Ö·¥è."
        )
        return os.system(f"kill -9 {os.getpid()} && python3 -m Anonymous")
    await message.reply_text(f"s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥° Ä·¥è…¥…¢  ú·¥Ä·¥ò·¥ò·¥á…¥·¥á·¥Ö.")


@app.on_message(filters.command("sudolist"))
async def sudoers_list(_, message: Message):
    sudoers = await get_sudoers()
    text = "üíî<u> **·¥è·¥°…¥·¥á Ä‚Äã:**</u>\n"
    sex = 0
    for x in OWNER_ID:
        try:
            user = await app.get_users(x)
            user = user.first_name if not user.mention else user.mention
            sex += 1
        except Exception:
            continue
        text += f"{sex}‚û§ {user}\n"
    smex = 0
    for count, user_id in enumerate(sudoers, 1):
        if user_id not in OWNER_ID:
            try:
                user = await app.get_users(user_id)
                user = user.first_name if not user.mention else user.mention
                if smex == 0:
                    smex += 1
                    text += "\nüñ§<u> **s·¥ú·¥Ö·¥è ·¥ús·¥á Äs:**</u>\n"
                sex += 1
                text += f"{sex}‚û§ {user}\n"
            except Exception:
                continue
    if not text:
        await message.reply_text("…¥·¥è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs")
    else:
        await message.reply_text(text)


# Restart Anonymous


@app.on_message(filters.command("restart") & filters.user(SUDOERS))
async def theme_func(_, message):
    A = "downloads"
    B = "raw_files"
    C = "cache"
    shutil.rmtree(A)
    shutil.rmtree(B)
    shutil.rmtree(C)
    await asyncio.sleep(2)
    os.mkdir(A)
    os.mkdir(B)
    os.mkdir(C)
    served_chats = []
    try:
        chats = await get_active_chats()
        for chat in chats:
            served_chats.append(int(chat["chat_id"]))
    except Exception as e:
        pass
    for x in served_chats:
        try:
            await app.send_message(
                x,
                f"{MUSIC_BOT_NAME}  ú·¥Äs ·¥ä·¥ús·¥õ  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ú·¥á Äs·¥á üÍú∞. s·¥è Ä Ä è Íú∞·¥è Ä ·¥õ ú·¥á …™ss·¥ú·¥ás.\n\ns·¥õ·¥Ä Ä·¥õ ·¥ò ü·¥Ä è…™…¥…¢ ·¥ÄÍú∞·¥õ·¥á Ä 10-15 s·¥á·¥Ñ·¥è…¥·¥Ös ·¥Ä…¢·¥Ä…™…¥.‚Äã",
            )
            await remove_active_chat(x)
        except Exception:
            pass
    x = await message.reply_text(f" Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ {MUSIC_BOT_NAME}")
    os.system(f"kill -9 {os.getpid()} && python3 -m Anonymous")


## Maintenance Anonymous


@app.on_message(filters.command("maintenance") & filters.user(SUDOERS))
async def maintenance(_, message):
    usage = "**·¥ús·¥Ä…¢·¥á:**\n/Anonymous [·¥á…¥·¥Ä ô ü·¥á|·¥Ö…™s·¥Ä ô ü·¥á‚Äã]"
    if len(message.command) != 2:
        return await message.reply_text(usage)
    chat_id = message.chat.id
    state = message.text.split(None, 1)[1].strip()
    state = state.lower()
    if state == "enable":
        user_id = 1
        await add_on(user_id)
        await message.reply_text("·¥á…¥·¥Ä ô ü·¥á·¥Ö Íú∞·¥è Ä ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á")
    elif state == "disable":
        user_id = 1
        await add_off(user_id)
        await message.reply_text("·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö‚Äã")
    else:
        await message.reply_text(usage)


## Gban Module


@app.on_message(filters.command("gban") & filters.user(SUDOERS))
async def ban_globally(_, message):
    if not message.reply_to_message:
        if len(message.command) < 2:
            await message.reply_text("**·¥ús·¥Ä…¢·¥á:**\n/gban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á|·¥ús·¥á Ä_…™·¥Ö‚Äã]")
            return
        user = message.text.split(None, 2)[1]
        if "@" in user:
            user = user.replace("@", "")
        user = await app.get_users(user)
        from_user = message.from_user
        if user.id == from_user.id:
            return await message.reply_text(
                "·¥° ú·¥Ä·¥õ ·¥õ ú·¥á Íú∞·¥ú*·¥ã,  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢ ô·¥Ä…¥  è·¥è·¥ú Äs·¥á üÍú∞‚ÄãüòÇ!"
            )
        elif user.id == BOT_ID:
            await message.reply_text("s ú·¥è·¥ú ü·¥Ö …™  ô ü·¥è·¥Ñ·¥ã ·¥ç ès·¥á üÍú∞,  ü·¥ç·¥Ä·¥è‚Äã!")
        elif user.id in SUDOERS:
            await message.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  ô ü·¥è·¥Ñ·¥ã ·¥Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Ä, ·¥Ä Ä·¥á  è·¥è·¥ú ·¥ç·¥Ä·¥Ö ?‚Äã")
        else:
            await add_gban_user(user.id)
            served_chats = []
            chats = await get_served_chats()
            for chat in chats:
                served_chats.append(int(chat["chat_id"]))
            m = await message.reply_text(
                f"**…™…¥…™·¥õ…™·¥Ä ü…™·¥¢…™…¥…¢ …¢ ü·¥è ô·¥Ä ü  ô·¥Ä…¥ ·¥è…¥ {user.mention}**\n\n·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ…™·¥ç·¥á‚Äã : {len(served_chats)}"
            )
            number_of_chats = 0
            for sex in served_chats:
                try:
                    await app.kick_chat_member(sex, user.id)
                    number_of_chats += 1
                    await asyncio.sleep(1)
                except FloodWait as e:
                    await asyncio.sleep(int(e.x))
                except Exception:
                    pass
            ban_text = f"""
__**…¥·¥á·¥° …¢ ü·¥è ô·¥Ä ü  ô·¥Ä…¥ ·¥è…¥ {MUSIC_BOT_NAME}**__

**·¥è Ä…™…¢…™…¥:** {message.chat.title} [`{message.chat.id}`]
**s·¥ú·¥Ö·¥è ·¥ús·¥á Ä:** {from_user.mention}
** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä:** {user.mention}
** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä …™·¥Ö:** `{user.id}`
**·¥Ñ ú·¥Ä·¥õs:** {number_of_chats}"""
            try:
                await m.delete()
            except Exception:
                pass
            await message.reply_text(
                f"{ban_text}",
                disable_web_page_preview=True,
            )
        return
    from_user_id = message.from_user.id
    from_user_mention = message.from_user.mention
    user_id = message.reply_to_message.from_user.id
    mention = message.reply_to_message.from_user.mention
    sudoers = await get_sudoers()
    if user_id == from_user_id:
        await message.reply_text("·¥° ú·¥Ä·¥õ ·¥õ ú·¥á Íú∞·¥ú*·¥ã,  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  ô ü·¥è·¥Ñ·¥ã  è·¥è·¥ú Äs·¥á üÍú∞‚Äã")
    elif user_id == BOT_ID:
        await message.reply_text("s ú·¥è·¥ú ü·¥Ö …™  ô ü·¥è·¥Ñ·¥ã ·¥ç ès·¥á üÍú∞,  ü·¥ç·¥Ä·¥è‚Äã!")
    elif user_id in sudoers:
        await message.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  ô ü·¥è·¥Ñ·¥ã ·¥Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Ä, ·¥Ä Ä·¥á  è·¥è·¥ú ·¥ç·¥Ä·¥Ö ?‚Äã")
    else:
        is_gbanned = await is_gbanned_user(user_id)
        if is_gbanned:
            await message.reply_text("·¥Ä ü Ä·¥á·¥Ä·¥Ö è …¢ ô·¥Ä…¥…¥·¥á·¥Ö‚Äã")
        else:
            await add_gban_user(user_id)
            served_chats = []
            chats = await get_served_chats()
            for chat in chats:
                served_chats.append(int(chat["chat_id"]))
            m = await message.reply_text(
                f"**…™…¥…™·¥õ…™·¥Ä ü…™·¥¢…™…¥…¢ …¢ ü·¥è ô·¥Ä ü  ô·¥Ä…¥ ·¥è…¥ {mention}**\n\n·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ…™·¥ç·¥á‚Äã : {len(served_chats)}"
            )
            number_of_chats = 0
            for sex in served_chats:
                try:
                    await app.kick_chat_member(sex, user_id)
                    number_of_chats += 1
                    await asyncio.sleep(1)
                except FloodWait as e:
                    await asyncio.sleep(int(e.x))
                except Exception:
                    pass
            ban_text = f"""
__**…¥·¥á·¥° …¢ ü·¥è ô·¥Ä ü  ô·¥Ä…¥ ·¥è…¥ {MUSIC_BOT_NAME}**__

**·¥è Ä…™…¢…™…¥:** {message.chat.title} [`{message.chat.id}`]
**s·¥ú·¥Ö·¥è ·¥ús·¥á Ä:** {from_user_mention}
** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä:** {mention}
** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä …™·¥Ö:** `{user_id}`
**·¥Ñ ú·¥Ä·¥õs:** {number_of_chats}"""
            try:
                await m.delete()
            except Exception:
                pass
            await message.reply_text(
                f"{ban_text}",
                disable_web_page_preview=True,
            )
            return


@app.on_message(filters.command("ungban") & filters.user(SUDOERS))
async def unban_globally(_, message):
    if not message.reply_to_message:
        if len(message.command) != 2:
            await message.reply_text(
                "**·¥ús·¥Ä…¢·¥á:**\n/ungban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á|·¥ús·¥á Ä_…™·¥Ö‚Äã]"
            )
            return
        user = message.text.split(None, 1)[1]
        if "@" in user:
            user = user.replace("@", "")
        user = await app.get_users(user)
        from_user = message.from_user
        sudoers = await get_sudoers()
        if user.id == from_user.id:
            await message.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã  è·¥è·¥ú Äs·¥á üÍú∞?")
        elif user.id == BOT_ID:
            await message.reply_text("s ú·¥è·¥ú ü·¥Ö …™ ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã ·¥ç ès·¥á üÍú∞?  ô·¥ú·¥õ …™'·¥ç …¥·¥è·¥õ  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö")
        elif user.id in sudoers:
            await message.reply_text("s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö/·¥ú…¥ ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö.")
        else:
            is_gbanned = await is_gbanned_user(user.id)
            if not is_gbanned:
                await message.reply_text(" ú·¥á's ·¥Ä ü Ä·¥á·¥Ä·¥Ö è Íú∞ Ä·¥á·¥á, ·¥° ú è  ô·¥ú ü ü è  ú…™·¥ç ·¥ú…¥·¥Ñ ü·¥á ?")
            else:
                await remove_gban_user(user.id)
                await message.reply_text(f"·¥ú…¥…¢ ô·¥Ä…¥…¥·¥á·¥Ö!")
        return
    from_user_id = message.from_user.id
    user_id = message.reply_to_message.from_user.id
    mention = message.reply_to_message.from_user.mention
    sudoers = await get_sudoers()
    if user_id == from_user_id:
        await message.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã  è·¥è·¥ú Äs·¥á üÍú∞?")
    elif user_id == BOT_ID:
        await message.reply_text(
            "s ú·¥è·¥ú ü·¥Ö …™ ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã ·¥ç ès·¥á üÍú∞?  ô·¥ú·¥õ …™'·¥ç …¥·¥è·¥õ  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö."
        )
    elif user_id in sudoers:
        await message.reply_text("s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö/·¥ú…¥ ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö.")
    else:
        is_gbanned = await is_gbanned_user(user_id)
        if not is_gbanned:
            await message.reply_text(" ú·¥á's ·¥Ä ü Ä·¥á·¥Ä·¥Ö è Íú∞ Ä·¥á·¥á, ·¥° ú è  ô·¥ú ü ü è  ú…™·¥ç ·¥ú…¥·¥Ñ ü·¥á?")
        else:
            await remove_gban_user(user_id)
            await message.reply_text(f"·¥ú…¥…¢ ô·¥Ä…¥…¥·¥á·¥Ö!")


chat_watcher_group = 5


@app.on_message(group=chat_watcher_group)
async def chat_watcher_func(_, message):
    try:
        userid = message.from_user.id
    except Exception:
        return
    checking = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    if await is_gbanned_user(userid):
        try:
            await message.chat.kick_member(userid)
        except Exception:
            return
        await message.reply_text(
            f"{checking} …™s …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö  ô è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥Ä…¥·¥Ö  ú·¥Äs  ô·¥á·¥á…¥ ·¥ã…™·¥Ñ·¥ã·¥á·¥Ö ·¥è·¥ú·¥õ ·¥èÍú∞ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.\n\n**·¥ò·¥èss…™ ô ü·¥á  Ä·¥á·¥Äs·¥è…¥:** ·¥ò·¥è·¥õ·¥á…¥·¥õ…™·¥Ä ü s·¥ò·¥Ä·¥ç·¥ç·¥á Ä ·¥Ä…¥·¥Ö ·¥Ä ô·¥ús·¥á Ä‚Äã."
        )


## UPDATE


@app.on_message(filters.command("update") & filters.user(SUDOERS))
async def update(_, message):
    m = subprocess.check_output(["git", "pull"]).decode("UTF-8")
    if str(m[0]) != "A":
        x = await message.reply_text("Íú∞·¥è·¥ú…¥·¥Ö ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ! ·¥ò·¥ús ú…™…¥…¢ …¥·¥è·¥°.")
        return os.system(f"kill -9 {os.getpid()} && python3 -m Anonymous")
    else:
        await message.reply_text("·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö‚Äã!")


# Broadcast Message


@app.on_message(filters.command("broadcast_pin") & filters.user(SUDOERS))
async def broadcast_message_pin_silent(_, message):
    if not message.reply_to_message:
        pass
    else:
        x = message.reply_to_message.message_id
        y = message.chat.id
        sent = 0
        pin = 0
        chats = []
        schats = await get_served_chats()
        for chat in schats:
            chats.append(int(chat["chat_id"]))
        for i in chats:
            try:
                m = await app.forward_messages(i, y, x)
                try:
                    await m.pin(disable_notification=True)
                    pin += 1
                except Exception:
                    pass
                await asyncio.sleep(0.3)
                sent += 1
            except Exception:
                pass
        await message.reply_text(
            f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ {sent}  ·¥Ñ ú·¥Ä·¥õs ·¥°…™·¥õ ú {pin} ·¥ò…™…¥s.**"
        )
        return
    if len(message.command) < 2:
        await message.reply_text(
            "**Usage**:\n/broadcast [·¥ç·¥áss·¥Ä…¢·¥á] ·¥è Ä [ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥ç·¥áss·¥Ä…¢·¥á]"
        )
        return
    text = message.text.split(None, 1)[1]
    sent = 0
    pin = 0
    chats = []
    schats = await get_served_chats()
    for chat in schats:
        chats.append(int(chat["chat_id"]))
    for i in chats:
        try:
            m = await app.send_message(i, text=text)
            try:
                await m.pin(disable_notification=True)
                pin += 1
            except Exception:
                pass
            await asyncio.sleep(0.3)
            sent += 1
        except Exception:
            pass
    await message.reply_text(
        f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ {sent} ·¥Ñ ú·¥Ä·¥õs ·¥°…™·¥õ ú {pin} ·¥ò…™…¥s.**"
    )


@app.on_message(filters.command("broadcast_pin_loud") & filters.user(SUDOERS))
async def broadcast_message_pin_loud(_, message):
    if not message.reply_to_message:
        pass
    else:
        x = message.reply_to_message.message_id
        y = message.chat.id
        sent = 0
        pin = 0
        chats = []
        schats = await get_served_chats()
        for chat in schats:
            chats.append(int(chat["chat_id"]))
        for i in chats:
            try:
                m = await app.forward_messages(i, y, x)
                try:
                    await m.pin(disable_notification=False)
                    pin += 1
                except Exception:
                    pass
                await asyncio.sleep(0.3)
                sent += 1
            except Exception:
                pass
        await message.reply_text(
            f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ {sent}  ·¥Ñ ú·¥Ä·¥õs ·¥°…™·¥õ ú {pin} ·¥ò…™…¥s.**"
        )
        return
    if len(message.command) < 2:
        await message.reply_text(
            "**Usage**:\n/broadcast [·¥ç·¥áss·¥Ä…¢·¥á] ·¥è Ä [ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥ç·¥áss·¥Ä…¢·¥á]"
        )
        return
    text = message.text.split(None, 1)[1]
    sent = 0
    pin = 0
    chats = []
    schats = await get_served_chats()
    for chat in schats:
        chats.append(int(chat["chat_id"]))
    for i in chats:
        try:
            m = await app.send_message(i, text=text)
            try:
                await m.pin(disable_notification=False)
                pin += 1
            except Exception:
                pass
            await asyncio.sleep(0.3)
            sent += 1
        except Exception:
            pass
    await message.reply_text(
        f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ {sent} ·¥Ñ ú·¥Ä·¥õs ·¥°…™·¥õ ú {pin} ·¥ò…™…¥s.**"
    )


@app.on_message(filters.command("broadcast") & filters.user(SUDOERS))
async def broadcast(_, message):
    if not message.reply_to_message:
        pass
    else:
        x = message.reply_to_message.message_id
        y = message.chat.id
        sent = 0
        chats = []
        schats = await get_served_chats()
        for chat in schats:
            chats.append(int(chat["chat_id"]))
        for i in chats:
            try:
                m = await app.forward_messages(i, y, x)
                await asyncio.sleep(0.3)
                sent += 1
            except Exception:
                pass
        await message.reply_text(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ {sent} ·¥Ñ ú·¥Ä·¥õs.**")
        return
    if len(message.command) < 2:
        await message.reply_text(
            "**Usage**:\n/broadcast [·¥ç·¥áss·¥Ä…¢·¥á] ·¥è Ä [ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥ç·¥áss·¥Ä…¢·¥á]"
        )
        return
    text = message.text.split(None, 1)[1]
    sent = 0
    chats = []
    schats = await get_served_chats()
    for chat in schats:
        chats.append(int(chat["chat_id"]))
    for i in chats:
        try:
            m = await app.send_message(i, text=text)
            await asyncio.sleep(0.3)
            sent += 1
        except Exception:
            pass
    await message.reply_text(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ {sent} ·¥Ñ ú·¥Ä·¥õs.**")


# Clean


@app.on_message(filters.command("clean") & filters.user(SUDOERS))
async def clean(_, message):
    dir = "downloads"
    dir1 = "cache"
    shutil.rmtree(dir)
    shutil.rmtree(dir1)
    os.mkdir(dir)
    os.mkdir(dir1)
    await message.reply_text("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ñ ü·¥á·¥Ä…¥·¥á·¥Ö ·¥Ä ü ü **·¥õ·¥á·¥ç·¥ò** ·¥Ö…™ Ä(s)!")
